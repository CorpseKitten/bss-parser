//------------------------------------------------
//   File: itemenchant.bss
//   Table: 1_LongSword, 
//          2_Blunt, 
//          3_TwoHandSword, 
//          4_Bow, 
//          5_Dagger,
//          Item_Table
//------------------------------------------------
local int32 b;
struct BodyData
{
    uint16		ItemId;
    uint16		ItemEnchant;
    int64		ItemNameLength;
    wchar_t		ItemName[ItemNameLength];
    byte		ItemType;
    byte		ItemClassify;
    byte		GradeType;
    byte        EquipType;
    byte        IsDropable;
    char		unk0[7]; // isDyable
    char		OccupiedEquipType[0x1F]; // 31 = not occupied
    char		OccupiedEquipNo[0x1F];   // 68 = not occupied.
    byte		unk;
    byte		ItemMaterial;
    int32		Weight;
    byte		unk;
    byte		unk;
    int32		ExpirationPeriod;
    byte		VestedType;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    char		ItemTableAllowedClasses[0x20];
    char		ItemTableAllowedPets[0x13];
    int32		unk;
    float		unk;
    byte		LifeExpType;
    int32		unk;
    byte		unk;
    byte		ItemAccessLevel;
    int64		OriginalPrice;
    int64		SellPriceToNpc;
    int32		OriginalPriceRate[3];
    int32		PriceRate[3];
    int64		RepairPrice;
    int64		RepairTime;
    int64		unk;
    int64		unk;
    int64		unk;
    int64		unk;
    int32		MaxestPercentForItemMarket;
    int32		MinestPercentForItemMarket;
    int64		BasePriceForItemMarket;
    int16		unk;
    byte		unk;
    int64       unkC;       
    char        unk7[16 * unkC] <optimize=false>; 	
    byte		unk;
    byte		unk;
    int32		unk;
    int32		unk;
    int16		ContentsEventType;
    int32		ContentsEventParam1;
    int32		ContentsEventParam2;
    byte		unk;
    byte		unk;
    int64		unk;
    int16		unk;
    int32		unk;
    byte		unk;
    int16		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		doLogging; // WRONG PLACED!
    int16		Character_Key;
    int32		unk;
    int64		UseConditionLength;
    wchar_t		UseCondition[UseConditionLength];
    int32		unk;
    int64		IconImageFileLength;
    wchar_t		IconImageFile[IconImageFileLength];
    int64		DescriptionTableLength;
    wchar_t		DescriptionTable[DescriptionTableLength];
    int64		unkStrLen5;
    wchar_t		unkStr5[unkStrLen5];
    int32		unk;
    int64		unkStrLen6;
    wchar_t		unkStr6[unkStrLen6];
    int64		unkStrLen7;
    wchar_t		unkStr7[unkStrLen7];
    byte		unk;
    int64		unkA;
    char		unk8[16 * unkA] <optimize=false>;
    int64		unkB;       
    int16		unk9[unkB] <optimize=false>;
    int64		unkD;       
    int32		unk10[unkD] <optimize=false>;  
    byte		unk;
    int16		unk;
    byte		unk;
    int16		unk;
    int16		unk;
    byte		unk;
    int32		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    int64		unk;
    int64		unk;
    byte		unk;
    byte		unk;
    byte		unk;
    byte		ArmorMaterial;
    int32		unk;
    int64		unk;
    int16		EnduranceLimit;
    byte		unk;
    int32		unk;
    byte		marketCategory1;
    byte		marketCategory2;
    byte		marketFilter1;
    byte		marketFilter2;

    struct
    {
        int32 unk;
        byte CanBeEnchanted;
        if (CanBeEnchanted > 0)
        {
            uint16		NeedEnchantItemID;
            uint16		Enchant;
            uint16		NeedEnchantItemID;
            uint16		unk;
            int64		NeedEnchantItemCount;
            int64		NeedPerfectEnchantItemCount;
            int64		BlackCountForItemMarket;
            int64		unk;
            int32		EnchantSuccessRate;
            int32		EnchantAddRate;
            int32		unk;
            int16		EnduranceLimit;
            int16		ReduceMaxEnduranceAtFail;
            int16		RecoverMaxEndurance;
            int16		ReduceMaxEnduranceAtPerfectEnchant;
            float		variedRecovMP;
            int32		variedMaxMP;
            float		variedRecovHP;
            int32		variedMaxHP;
            float		unk00[10];	
            int32		variedCriticalRate;
            int32		variedDropItemRate;
            int32		variedFishingSpeedRate;
            int32		variedCollectionSpeedRate;
            int32		variedMoveSpeedRate;
            int32		variedAttackSpeedRate;
            int32		variedCastingSpeedRate;
            int64		variedPossessableWeight;
            int32		variedSuspension;
            int32		unk;
            byte		socket;
            float		unkF;
            float		unkF;
            float		unkF;
            // stats start?				
            float		unkF;
            float		unkF;
            float		unkF;
            float		unkF;
            float		unkF;				
            float		unkF;
            float		unkF;
            float		unkF;					
            float		unkF;
            float		unkF;
            float		unkF;					
            float		unkF;
            float		unkF;
            float		unkF;					
            float		unkF;
            float		unkF;
            float		unkF;
            // stats end?
            uint16		unk;
            uint16		EnchantTableSkillNo;
            int64		DescriptionLength;
            wchar_t		Description[DescriptionLength];
            int64       EnchantDescriptionLength;
            wchar_t     EnchantDescription[EnchantDescriptionLength];
            byte		unk;
            byte		unk;
            int32		unk;
            int32		unk;
            byte		MarketFilter1;
            byte		MarketFilter2;
            byte		unk;

            struct
            {
                for (b = 0; b < 3; ++b)
                {
                    struct
                    {
                        int64 statTypeLength; 			// Melee, Ranged, Magic
                        wchar_t DRM_DD[statTypeLength]; // DDD,RDD,MDD
                        float DRM_HIT; 					// DHIT, RHIT, MHIT
                    } offensiveStatData;
                }
                for (b = 0; b < 3; ++b)
                {
                    struct
                    {
                        float DRM_DV; 					// DDV,RDV,MDV
                        float H_DRM_DV; 				// HDDV,HRDV,HMDV
                        float DRM_PV; 					// DPV,RPV,MPV
                        float H_DRM_PV; 				// HDPV,HRPV,HMPV
                    } defensiveStatData;
                }
                int32 unk;
            } statsData;
        }
    } item_enchant_table;

    struct
    {
        byte		unkCrap;
        if (unkCrap > 0)
        {
            uint16      unk0[64];
            int16       unk1[32];
            char        unk2[38];
            char        unk3[76];
            char        unk4;
            char        unk5;
            int16       unk6;
        }
        else
        {
            byte unk;
        }
    } market_data;
};

struct FooterData
{
    uint16 ItemID;
    ubyte  Enchant;
};

struct Data
{
    struct
    {
        int32       count;
        BodyData    bodyData[count] <optimize=false>;
    } Body;

    struct
    {
        int32       footerDataCount;
        FooterData  footerData[footerDataCount] <optimize=false>;
    } Footer;
};

Data data;